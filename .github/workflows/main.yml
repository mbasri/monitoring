name: 'Build, Scan & Publish Docker image'

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    branches: [ main, dev ]
    inputs:
      enable-date-versioning:
        description: 'Enable date tag'
        required: true
        default: 'false'
        type: boolean
    # ${{ github.event.inputs.description }}
env:
  REGISTRY: 'ghcr.io'
  
  PROMETHEUS_DIRECTORY: 'docker/prometheus' 
  PROMETHEUS_IMAGE_NAME: 'mbasri/prometheus'

  NODE_EXPORTER_DIRECTORY: 'docker/node-exporter'
  NODE_EXPORTER_IMAGE_NAME: 'mbasri/node-exporter'
  
jobs:
  # Job to generate a version based on the current date and time
  generate-version:
    runs-on: ubuntu-latest
    name: Generate version
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - name: Generate date version
      id: version
      run: echo "version=$(date +'%Y%m%d%H%M%S')" >> "$GITHUB_OUTPUT"

  # Job to build the Prometheus Docker image
  build-prometheus:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write # needed for signing the images with GitHub OIDC Token

    needs: [ generate-version ]
    name: Build Prometheus image
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Install Cosign
      uses: sigstore/cosign-installer@main

    # - name: Set up QEMU
    #   uses: docker/setup-qemu-action@master

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@master

    - name: Login to GitHub Container Registry
      uses: docker/login-action@master
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@master
      with:
        images: ${{ env.REGISTRY }}/${{ env.PROMETHEUS_IMAGE_NAME }}
        labels: |
          org.opencontainers.image.description=Prometheus is an open-source systems monitoring and alerting toolkit
          org.opencontainers.image.licenses=MIT
    
    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@master
      with:
        context: ${{ env.PROMETHEUS_DIRECTORY }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ steps.meta.outputs.tags }}
          ${{ env.REGISTRY }}/${{ env.PROMETHEUS_IMAGE_NAME }}:${{ needs.generate-version.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    - name: Sign the published Docker image
      if: ${{ github.event_name != 'pull_request' }}
      env:
        # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
        TAGS: |
          ${{ steps.meta.outputs.tags }}
          ${{ env.REGISTRY }}/${{ env.PROMETHEUS_IMAGE_NAME }}:${{ needs.generate-version.outputs.version }}
        DIGEST: ${{ steps.build-and-push.outputs.digest }}
      # This step uses the identity token to provision an ephemeral certificate
      # against the sigstore community Fulcio instance.
      run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: image
        # image-ref: ${{ steps.build-and-push.outputs.image }}
        image-ref: ${{ env.REGISTRY }}/${{ env.PROMETHEUS_IMAGE_NAME }}:${{ needs.generate-version.outputs.version }}
        output: trivy-report-prometheus.json
        format: json
        exit-code: 0
        ignore-unfixed: true

  scan-prometheus:
    runs-on: ubuntu-latest
    needs: [  generate-version, build-prometheus ]
    name: Scan Prometheus image
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: image
        image-ref: ${{ env.REGISTRY }}/${{ env.PROMETHEUS_IMAGE_NAME }}:${{ needs.generate-version.outputs.version }}
        output: trivy-report-prometheus.json
        format: json
        exit-code: 0
        ignore-unfixed: true

    - name: Upload Vulnerability Scan Results
      uses: actions/upload-artifact@main
      with:
        name: trivy-report-prometheus
        path: trivy-report-prometheus.json
        retention-days: 30

  # Job to build the Node Exporter Docker image
  build-node-exporter:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write # needed for signing the images with GitHub OIDC Token

    needs: [ generate-version ]
    name: Build Node Exporter image
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Install Cosign
      uses: sigstore/cosign-installer@main

    - name: Set up QEMU
      uses: docker/setup-qemu-action@master

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@master

    - name: Login to GitHub Container Registry
      uses: docker/login-action@master
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@master
      with:
        images: ${{ env.REGISTRY }}/${{ env.NODE_EXPORTER_IMAGE_NAME }}
        labels: |
          org.opencontainers.image.description="Prometheus Node Exporter is a Prometheus exporter for hardware and OS metrics exposed by *NIX kernels, written in Go with pluggable metric collectors"
          org.opencontainers.image.licenses="MIT"
    
    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@master
      with:
        context: ${{ env.NODE_EXPORTER_DIRECTORY }}
        push: ${{ github.event_name != 'pull_request' }}
        platforms: linux/amd64,linux/arm64
        tags: |
          ${{ steps.meta.outputs.tags }}
          ${{ env.REGISTRY }}/${{ env.NODE_EXPORTER_IMAGE_NAME }}:${{ needs.generate-version.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Sign the published Docker image
      if: ${{ github.event_name != 'pull_request' }}
      env:
        # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
        TAGS: |
          ${{ steps.meta.outputs.tags }}
          ${{ env.REGISTRY }}/${{ env.NODE_EXPORTER_IMAGE_NAME }}:${{ needs.generate-version.outputs.version }}
        DIGEST: ${{ steps.build-and-push.outputs.digest }}
      # This step uses the identity token to provision an ephemeral certificate
      # against the sigstore community Fulcio instance.
      run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  scan-node-exporter:
    runs-on: ubuntu-latest
    needs: [ generate-version, build-node-exporter ]
    name: Scan Node Exporter image
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: image
        image-ref: ${{ env.REGISTRY }}/${{ env.NODE_EXPORTER_IMAGE_NAME }}:${{ needs.generate-version.outputs.version }}
        output: trivy-report-node-exporter.json
        format: json
        exit-code: 0
        ignore-unfixed: true
    
    - name: Upload Vulnerability Scan Results
      uses: actions/upload-artifact@main
      with:
        name: trivy-report-node-exporter
        path: trivy-report-node-exporter.json
        retention-days: 30
